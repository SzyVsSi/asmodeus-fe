{"version":3,"file":"index.esm-K817YUTx.js","sources":["../../node_modules/.pnpm/@tanstack+query-core@5.59.13/node_modules/@tanstack/query-core/build/modern/mutationObserver.js","../../node_modules/.pnpm/@tanstack+react-query@5.59.15_react@18.3.1/node_modules/@tanstack/react-query/build/modern/utils.js","../../node_modules/.pnpm/@tanstack+react-query@5.59.15_react@18.3.1/node_modules/@tanstack/react-query/build/modern/useMutation.js","../../src/core/api/gameSessionsApi.ts","../../src/core/modules/createGameSessionsModule.ts","../../src/core/services/fetchService.ts","../../src/core/services/apiInitializer.ts","../../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs","../../node_modules/.pnpm/react-hook-form@7.53.1_react@18.3.1/node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["// src/mutationObserver.ts\nimport { getDefaultState } from \"./mutation.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { hashKey, shallowEqualObjects } from \"./utils.js\";\nvar MutationObserver = class extends Subscribable {\n  #client;\n  #currentResult = void 0;\n  #currentMutation;\n  #mutateOptions;\n  constructor(client, options) {\n    super();\n    this.#client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.#updateResult();\n  }\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    this.options = this.#client.defaultMutationOptions(options);\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: \"observerOptionsUpdated\",\n        mutation: this.#currentMutation,\n        observer: this\n      });\n    }\n    if (prevOptions?.mutationKey && this.options.mutationKey && hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)) {\n      this.reset();\n    } else if (this.#currentMutation?.state.status === \"pending\") {\n      this.#currentMutation.setOptions(this.options);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this);\n    }\n  }\n  onMutationUpdate(action) {\n    this.#updateResult();\n    this.#notify(action);\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  reset() {\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = void 0;\n    this.#updateResult();\n    this.#notify();\n  }\n  mutate(variables, options) {\n    this.#mutateOptions = options;\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = this.#client.getMutationCache().build(this.#client, this.options);\n    this.#currentMutation.addObserver(this);\n    return this.#currentMutation.execute(variables);\n  }\n  #updateResult() {\n    const state = this.#currentMutation?.state ?? getDefaultState();\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === \"pending\",\n      isSuccess: state.status === \"success\",\n      isError: state.status === \"error\",\n      isIdle: state.status === \"idle\",\n      mutate: this.mutate,\n      reset: this.reset\n    };\n  }\n  #notify(action) {\n    notifyManager.batch(() => {\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables;\n        const context = this.#currentResult.context;\n        if (action?.type === \"success\") {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context);\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context);\n        } else if (action?.type === \"error\") {\n          this.#mutateOptions.onError?.(action.error, variables, context);\n          this.#mutateOptions.onSettled?.(\n            void 0,\n            action.error,\n            variables,\n            context\n          );\n        }\n      }\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult);\n      });\n    });\n  }\n};\nexport {\n  MutationObserver\n};\n//# sourceMappingURL=mutationObserver.js.map","// src/utils.ts\nfunction shouldThrowError(throwError, params) {\n  if (typeof throwError === \"function\") {\n    return throwError(...params);\n  }\n  return !!throwError;\n}\nfunction noop() {\n}\nexport {\n  noop,\n  shouldThrowError\n};\n//# sourceMappingURL=utils.js.map","\"use client\";\n\n// src/useMutation.ts\nimport * as React from \"react\";\nimport { MutationObserver, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { noop, shouldThrowError } from \"./utils.js\";\nfunction useMutation(options, queryClient) {\n  const client = useQueryClient(queryClient);\n  const [observer] = React.useState(\n    () => new MutationObserver(\n      client,\n      options\n    )\n  );\n  React.useEffect(() => {\n    observer.setOptions(options);\n  }, [observer, options]);\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  const mutate = React.useCallback(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop);\n    },\n    [observer]\n  );\n  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {\n    throw result.error;\n  }\n  return { ...result, mutate, mutateAsync: result.mutate };\n}\nexport {\n  useMutation\n};\n//# sourceMappingURL=useMutation.js.map","import type { FetchService } from '../services/fetchService';\nimport type { ApiRoom, ApiVerifyCodeResponse } from './types';\n\nexport class GameSessionsApi {\n\tconstructor(private fetchService: FetchService) {}\n\n\tasync checkValidCode({\n\t\ttoken,\n\t\tcode,\n\t\troom,\n\t}: {\n\t\ttoken: string;\n\t\tcode: string;\n\t\troom: ApiRoom;\n\t}) {\n\t\treturn this.fetchService.post<ApiVerifyCodeResponse>(\n\t\t\t`/verify-code/${token}`,\n\t\t\t{\n\t\t\t\tcode,\n\t\t\t\troom,\n\t\t\t},\n\t\t);\n\t}\n\n\tasync checkValidToken(token: string) {\n\t\treturn this.fetchService.post<ApiVerifyCodeResponse>(\n\t\t\t`/verify-token/${token}`,\n\t\t);\n\t}\n\n\tasync deleteToken(token: string) {\n\t\treturn this.fetchService.delete<ApiVerifyCodeResponse>(\n\t\t\t`/asmodeus/${token}`,\n\t\t);\n\t}\n}\n","import { useMutation } from '@tanstack/react-query';\nimport type { GameSessionsApi } from '../api/gameSessionsApi';\nimport type { ApiRoom, ApiVerifyCodeResponse } from '../api/types';\n\nexport const createGameSessionsModule = ({\n\tgameSessionsApi,\n}: {\n\tgameSessionsApi: GameSessionsApi;\n}) => {\n\tconst useCheckCode = () => {\n\t\tconst { mutateAsync, error, isPending } = useMutation<\n\t\t\tApiVerifyCodeResponse,\n\t\t\tError,\n\t\t\t{\n\t\t\t\ttoken: string;\n\t\t\t\tcode: string;\n\t\t\t\troom: ApiRoom;\n\t\t\t}\n\t\t>({\n\t\t\tmutationFn: (params) => {\n\t\t\t\treturn gameSessionsApi.checkValidCode(params);\n\t\t\t},\n\t\t});\n\n\t\treturn {\n\t\t\tcheckCode: mutateAsync,\n\t\t\terror,\n\t\t\tisPending,\n\t\t};\n\t};\n\n\tconst useVerifyToken = () => {\n\t\tconst { mutateAsync, error, isPending } = useMutation<\n\t\t\tApiVerifyCodeResponse,\n\t\t\tError,\n\t\t\tstring\n\t\t>({\n\t\t\tmutationFn: (token) => gameSessionsApi.checkValidToken(token),\n\t\t});\n\n\t\treturn {\n\t\t\tverifyToken: mutateAsync,\n\t\t\terror,\n\t\t\tisPending,\n\t\t};\n\t};\n\n\tconst useDeleteToken = () => {\n\t\tconst { mutateAsync, isPending, error } = useMutation<\n\t\t\tApiVerifyCodeResponse,\n\t\t\tError,\n\t\t\tstring\n\t\t>({\n\t\t\tmutationFn: (token) => gameSessionsApi.deleteToken(token),\n\t\t});\n\n\t\treturn {\n\t\t\tdeleteToken: mutateAsync,\n\t\t\tisPending,\n\t\t\terror,\n\t\t};\n\t};\n\n\treturn {\n\t\tuseCheckCode,\n\t\tuseVerifyToken,\n\t\tuseDeleteToken,\n\t};\n};\n","// biome-ignore lint/suspicious/noExplicitAny: It's okay here\ntype ObjectType = Record<string, any>;\n\ntype FetchServiceOptions = {\n\tlogRequests?: boolean;\n};\n\nexport class FetchService {\n\tprivate apiUrl = 'https://aufzfslpqpjocwztogzo.supabase.co/functions/v1';\n\n\tconstructor(private fetchServiceOptions: FetchServiceOptions) {}\n\n\tget<ReturnType>(url: string) {\n\t\treturn this.request<ReturnType>({\n\t\t\turl,\n\t\t\tparams: { method: 'GET' },\n\t\t});\n\t}\n\n\tput<ReturnType>(url: string, body?: unknown) {\n\t\treturn this.request<ReturnType>({\n\t\t\turl,\n\t\t\tparams: {\n\t\t\t\tbody: JSON.stringify(body),\n\t\t\t\tmethod: 'PUT',\n\t\t\t},\n\t\t});\n\t}\n\n\tpost<ReturnType>(url: string, body?: unknown) {\n\t\treturn this.request<ReturnType>({\n\t\t\turl,\n\t\t\tparams: { method: 'POST', body: JSON.stringify(body) },\n\t\t});\n\t}\n\n\tdelete<ReturnType>(url: string) {\n\t\treturn this.request<ReturnType>({\n\t\t\turl,\n\t\t\tparams: { method: 'DELETE' },\n\t\t});\n\t}\n\n\tasync request<ReturnType>({\n\t\turl,\n\t\tparams,\n\t}: {\n\t\turl: string;\n\t\tparams?: ObjectType;\n\t}): Promise<ReturnType> {\n\t\tif (!this.apiUrl) {\n\t\t\tthrow new Error('The api url is undefined');\n\t\t}\n\n\t\tconst requestHeader = {\n\t\t\theaders: {\n\t\t\t\t'Content-type': 'application/json',\n\t\t\t\tAccept: 'application/json',\n\t\t\t},\n\t\t};\n\n\t\tif (this.fetchServiceOptions.logRequests) {\n\t\t\tconsole.debug('api request', { url: this.apiUrl + url, params });\n\t\t}\n\n\t\tconst response = await fetch(this.apiUrl + url, {\n\t\t\t...requestHeader,\n\t\t\t...params,\n\t\t});\n\n\t\treturn this.handleResponse(response);\n\t}\n\n\tprivate async handleResponse(res: Response) {\n\t\tif (!res.ok) {\n\t\t\treturn Promise.reject(res);\n\t\t}\n\n\t\tconst text = await res.text();\n\t\ttry {\n\t\t\tconst json = JSON.parse(text);\n\t\t\treturn json;\n\t\t} catch {\n\t\t\treturn text;\n\t\t}\n\t}\n}\n","import { GameSessionsApi } from '../api/gameSessionsApi';\nimport { createGameSessionsModule } from '../modules/createGameSessionsModule';\nimport { FetchService } from './fetchService';\n\nconst fetchService = new FetchService({ logRequests: import.meta.env.DEV });\nconst gameSessionsApi = new GameSessionsApi(fetchService);\n\nexport const gameSessionsModule = createGameSessionsModule({ gameSessionsApi });\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n                value: get(control._fields, name)._f.value,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) || formState.disabled\n                ? { disabled: formState.disabled || disabled }\n                : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: React.useCallback((elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            }, [control._fields, name]),\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            isValidating: {\n                enumerable: true,\n                get: () => !!get(formState.validatingFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key])) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => (!fieldReference || !fieldReference.validate) &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (!props.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!props.disabled &&\n            (_proxyFormState.isValidating || _proxyFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !props.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!props.disabled) {\n            const disabledField = !!(get(_fields, name) &&\n                get(_fields, name)._f &&\n                get(_fields, name)._f.disabled);\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n                isCurrentFieldPristine || disabledField\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.dirtyFields &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            (_proxyFormState.touchedFields &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !props.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid) {\n                    if (props.mode === 'onBlur') {\n                        if (isBlurEvent) {\n                            _updateValid();\n                        }\n                    }\n                    else {\n                        _updateValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {\n        if ((isBoolean(disabled) && _state.mount) || !!disabled) {\n            const inputValue = disabled\n                ? undefined\n                : isUndefined(value)\n                    ? getFieldValue(field ? field._f : get(fields, name)._f)\n                    : value;\n            set(_formValues, name, inputValue);\n            updateTouchAndDirty(name, inputValue, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(props.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : props.disabled,\n                name,\n                value: options.value,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || props.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    React.useEffect(() => {\n        if (_formControl.current) {\n            _formControl.current.watch = _formControl.current.watch.bind({});\n        }\n    }, [formState]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["MutationObserver","_a","Subscribable","client","options","__privateAdd","_MutationObserver_instances","_client","_currentResult","_currentMutation","_mutateOptions","__privateSet","__privateMethod","updateResult_fn","prevOptions","__privateGet","shallowEqualObjects","hashKey","action","notify_fn","variables","state","getDefaultState","notifyManager","context","_b","_d","_c","_f","_e","_h","_g","listener","shouldThrowError","throwError","params","noop","useMutation","queryClient","useQueryClient","observer","React.useState","React.useEffect","result","React.useSyncExternalStore","React.useCallback","onStoreChange","mutate","mutateOptions","GameSessionsApi","fetchService","token","code","room","createGameSessionsModule","gameSessionsApi","mutateAsync","error","isPending","FetchService","fetchServiceOptions","__publicField","url","body","requestHeader","response","res","text","gameSessionsModule","r","f","n","o","clsx","isCheckBoxInput","element","isDateObject","value","isNullOrUndefined","isObjectType","isObject","getEventValue","event","getNodeParentName","name","isNameInFieldArray","names","isPlainObject","tempObject","prototypeCopy","isWeb","cloneObject","data","copy","isArray","key","compact","isUndefined","val","get","object","path","defaultValue","isBoolean","isKey","stringToPath","input","set","index","tempPath","length","lastIndex","newValue","objValue","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","React","getProxyFormState","formState","control","localProxyFormState","isRoot","_key","isEmptyObject","shouldRenderFormState","formStateData","_proxyFormState","updateFormState","convertToArrayPayload","useSubscribe","props","_props","subscription","isString","generateWatchOutput","_names","formValues","isGlobal","fieldName","appendErrors","validateAllFieldCriteria","errors","type","message","getValidationModes","mode","isWatched","isBlurEvent","watchName","iterateFieldsByAction","fields","fieldsNames","abortEarly","field","currentField","updateFieldArrayRootError","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","isMessage","isRadioInput","isRegex","defaultResult","validResult","getCheckboxValue","values","option","defaultReturn","getRadioValue","previous","getValidateError","ref","getValueAndMessage","validationData","validateField","shouldUseNativeValidation","isFieldArray","refs","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","disabled","inputValue","inputRef","setCustomValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","convertTimeToDate","time","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","baseGet","updatePath","isEmptyArray","obj","unset","paths","childObject","createSubject","_observers","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","isMultipleSelect","live","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","valueAsDate","setValueAs","getFieldValue","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","schemaErrorLookup","foundError","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","createFormControl","_options","_formState","_defaultValues","_formValues","_state","delayErrorCallback","timer","_subjects","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","callback","wait","_updateValid","shouldUpdateValid","isValid","_executeSchema","executeBuiltInValidation","_updateIsValidating","isValidating","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","touchedFields","_getDirty","updateErrors","_setErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","updatedFormState","executeSchemaAndUpdateState","shouldOnlyCheckValid","isFieldArrayRoot","isPromiseFunction","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","optionRef","checkboxRef","radioRef","trigger","setValues","fieldKey","setValue","cloneValue","onChange","target","isFieldValueUpdated","getCurrentFieldValue","_updateIsFieldValueUpdated","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","getFieldState","clearErrors","inputName","setError","currentError","currentRef","restOfErrorTree","watch","payload","_updateDisabledField","register","disabledIsDefined","fieldRef","radioOrCheckbox","_focusError","_disableForm","handleSubmit","onValid","onInvalid","e","onValidError","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","fieldsToCheck","form","reset","useForm","_formControl","_values","isDirty"],"mappings":"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","x_google_ignoreList":[0,1,2,7,8]}